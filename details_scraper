from lxml import etree
import nltk
from nltk import word_tokenize


def get_frequency_in_page(body_content, name):
    score = 0
    last_name = name.split()[-1]
    score += sum(x in {last_name,str(last_name+'\'s')} for x in nltk.wordpunct_tokenize(body_content))
    return score
def get_institution_scores(people_details):
    institute_scores = list()

    for person in people_details:
        for institute in person.institutions:
            if institute not in institute_scores:
                institute_scores[institute] = 1
            else:
                institute_scores[institute] += 1
    return institute_scores

def get_person_from_url(url, people_details):

    for person in people_details:
        if person.url == url:
            return person
    print("url " + str(url) +" not found")

def get_connection_scores(people_details):

    institution_scores = get_institution_scores(people_details)

    for person in people_details:
        connections = person.connection_urls
        for connection in connections:
            connection_score = 0
            conn = get_person_from_url(connection, people_details)
            if conn:
                #Get number of occurences of connection in person's page
                connection_score = get_frequency_in_page(conn.page_html, person.name)

                #Get number of occurences of person in connection's page
                connection_score += get_frequency_in_page(person.page_html, conn.name)

                #Add weight for spouse and children
                if ((conn.name in person.spouse) or (person.name in conn.spouse)):
                    connection_score +=10
                if ((conn.name in person.children) or (person.name in conn.children)):
                    connection_score += 5

                #Add weight for institutions
                common_institutes = list(set(person.institutions).intersection(conn.institutions))
                for insti in common_institutes:
                    connection_score += institution_scores[insti]
                person.add_connection([[conn , connection_score]])

def get_connection_matrix(people_details):
    matrix = []
    for person in people_details:
        for connection in person.connections:
            matrix.append([[person.name,connection[0].name],connection[1]])
    return matrix

def get_friends_list(master_list_of_people, page_html):
    friends_url = list()
    if (page_html):

        body_soup = BeautifulSoup(str(page_html),"lxml")
        all_urls_full = body_soup.findAll("a")

        all_urls=list()
        for element in all_urls_full:
            full_link = 'https://en.wikipedia.org' + element.get('href')
            if full_link not in all_urls:
                all_urls.append(full_link)

        for single_url in all_urls:
            if single_url in master_list_of_people:
                friends_url.append(single_url)
    return friends_url

def get_details_of_single_person(browser, url, master_list_of_people):
    browser.get(url)
    browser.execute_script("window.scrollTo(0,1500)")
    soup = BeautifulSoup(browser.page_source,"lxml")
    title = soup.findAll(attrs={'class': 'firstHeading'})
    name = title[0].text
    dob = soup.findAll(attrs={'class': 'bday'})
    pos = soup.findAll(attrs={'class': 'role'})
    position = list()
    position.append(pos)
    spouses = list()
    children = list()
    institutions = list()
    page_html = str(soup.findAll('div', attrs={'id' : 'bodyContent'})[0])
    table = soup.findAll(attrs={'class' : 'infobox'})[0]
    for row in table.findAll("tr"):
        category =""
        value = ""
        if row.findAll("th") and row.findAll("td"):
            category = str(row.find("th").text)
            value = str(row.find("td").text)
        elif row.findAll('th'):
            category = 'position'
            value = str(row.find("th").text)
        if category in ['Net Worth','net worth','Net worth']:
            net_worth = value
        if category in ['Spouse','Spouses','Spouse(s)','Partner','Partner(s)','Wife','Husband']:
            spouses.append(value)
        if category in ['Child','Children','child','children']:
            children.append(value)
        if category in ['Institute','Institution','Institution(s)','Institutions','Almamater','Alma mater','University','College', 'Company','Employer','Board Member of','Party','Political Party']:
            institutions.append(value)
        if category in['position','Occupation']:
            position.append(value)


    friends_urls = get_friends_list(master_list_of_people, page_html)

    new_person = Person(name, url)
    if dob:
        new_person.add_dob(dob[0].text)
    if position:
        new_person.add_position(position)
    if spouses:
        new_person.add_spouse(spouses)
    if children:
        new_person.add_child(children)
    if institutions:
        new_person.add_institution(institutions)
    if friends_urls:
        new_person.add_connection_urls(friends_urls)

    new_person.addhtml(page_html)
    return new_person



def get_details_of_people(url_list):
    browser = webdriver.PhantomJS(executable_path='/Users/pranavnagesh/Desktop/PK/Spring 2016/Python/Code work/phantomjs')
    people_details = list()
    for url in url_list:
        new_person = get_details_of_single_person(browser, url, url_list)
        people_details.append(new_person)

    get_connection_scores(people_details)
    matrix = get_connection_matrix(people_details)

    return people_details, matrix
